# Mybatis-plus

## 1.Mybatis-plus简介

mybatis-plus是简化我们的单表生成操作的，有如下特性

1.无侵入：只做增加不做改变，引入它不会对现有工程产生影响。

2.耗损小：启动既会自动注入基本CRUD，性能基本无耗损，直接面向对象操作，BaseMapper

3.强大的CRUD功能：内置通用Mapper，通用Service，仅仅通过少量配置即可实现单表大部分CRUD操作，更有强大的条件构造器，满足各类使用需求，以后简单的CRUD操作，不用自己编写了。

4.支持Lambda形式调用：通过Lambda表达式，方便的编写各类查询条件，无需再担心字段写错。

5.支持主键自动生成：支持多达4种主键策略(内含分布式唯一ID生成器-Sequence)，可自由配置，完美解决问题。

6.支持ActiveRecord模式：支持ActiveRecord形式调用，实体类只需继承Model类即可进行强大的CRUD操作。

7.支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）

8.内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用（自动帮你生成代码）

9.内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询

10.分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库

11.内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询

12.内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作

## 2.快速入门

 官方例子：https://mybatis.plus/guide/quick-start.html#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B

我们将通过一个简单的 Demo 来阐述 MyBatis-Plus 的强大功能，在此之前，我们假设您已经：

- 拥有 Java 开发环境以及相应 IDE
- 熟悉 Spring Boot
- 熟悉 Maven

------

现有一张 `User` 表，其表结构如下：

| id   | name   | age  | email              |
| ---- | ------ | ---- | ------------------ |
| 1    | Jone   | 18   | test1@baomidou.com |
| 2    | Jack   | 20   | test2@baomidou.com |
| 3    | Tom    | 28   | test3@baomidou.com |
| 4    | Sandy  | 21   | test4@baomidou.com |
| 5    | Billie | 24   | test5@baomidou.com |

### 1.创建数据库mybatis-plus，在数据库中执行以下语句

```sql
DROP TABLE IF EXISTS user;

CREATE TABLE user
(
	id BIGINT(20) NOT NULL COMMENT '主键ID',
	name VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名',
	age INT(11) NULL DEFAULT NULL COMMENT '年龄',
	email VARCHAR(50) NULL DEFAULT NULL COMMENT '邮箱',
	PRIMARY KEY (id)
);
--真实开发中，version(乐观锁)，delete(逻辑删除)，gmt_create，gmt_modified
```

```sql
DELETE FROM user;

INSERT INTO user (id, name, age, email) VALUES
(1, 'Jone', 18, 'test1@baomidou.com'),
(2, 'Jack', 20, 'test2@baomidou.com'),
(3, 'Tom', 28, 'test3@baomidou.com'),
(4, 'Sandy', 21, 'test4@baomidou.com'),
(5, 'Billie', 24, 'test5@baomidou.com');
```

### 2.初始化工程

创建一个空的 Spring Boot 工程（工程将以 H2 作为默认数据库进行演示）

### 3.添加依赖

引入 `spring-boot-starter`、`spring-boot-starter-test`、`mybatis-plus-boot-starter`、`h2` 依赖：

```xml
<!--  数据库驱动    -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
     <!--mybatis_plus-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.0.5</version>
        </dependency>
```

### 4.连接数据库配置

1.在 application.properties配置连接

```properties
#mysql8.0
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.url=jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
```

2.在 Spring Boot 启动类中添加 `@MapperScan` 注解，扫描 Mapper 文件夹：

```java
@SpringBootApplication
@MapperScan("com.ren.mapper")
public class MybatisPlusApplication {

}
```

### 5.编码

1.创建pojo包，在报下创建实体类 User

```java
public class User {
    private Long id;
    private String name;
    private Integer age;
    private String email;
}
<!--省略get,set方法-->
```

2.创建mapper包，创建UserMapper接口，继承 UserMapper.java

```java
@Repository
public interface UserMapper extends BaseMapper<User> {

}
```

3.开始使用

添加测试类，进行功能测试：

```java
@SpringBootTest
class MybatisPlusApplicationTests {

    @Autowired
    private UserMapper userMapper;

    @Test
    void contextLoads() {
        //查询全部用户,参数是一个Wrapper，条件构造器，这里先不用null
        List<User> users = userMapper.selectList(null);
        users.forEach(System.out::println);
    }

}
```

UserMapper 中的 selectList()方法的参数为 MP内置的条件封装器 `Wrapper，所以不填写就是无任何条件。

## 3.配置日志

在application.properties中配置

```properties
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
```

## 4.CRUD扩展

### 1.Insert插入(update也类似)

```java
    //测试插入
    @Test
    public void testInsert() {
        User user = new User();
        //id会自动生成
        user.setAge(3);
        user.setName("说java");
        user.setEmail("123");

        int result = userMapper.insert(user);
        System.out.println(result);     //受影响的行数
        System.out.println(user);      //发现id会自动回填
    }
```

### 2.数据库插入的id的Twitter的snowflake算法(雪花算法)

snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。可以保证几乎全球唯一

## 5.代码自动生成器

dao、Entity、service、controller的包都需要自己创建！

AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。

```java
// 代码自动生成器
public class Code {
public static void main(String[] args) {
    // 需要构建一个 代码自动生成器 对象
    AutoGenerator mpg = new AutoGenerator();
    // 配置策略
    // 1、全局配置 
    GlobalConfig gc = new GlobalConfig();
    String projectPath = System.getProperty("user.dir");           //获得当前的项目路径
    gc.setOutputDir(projectPath+"/src/main/java");              //输出到当前路径的xxx
    gc.setAuthor("狂神说");                                       //输出作者
    gc.setOpen(false);                                            //不打开资源管理器
    gc.setFileOverride(false);                                  //是否覆盖
    gc.setServiceName("%sService");                     // 去Service的I前缀
    gc.setIdType(IdType.ID_WORKER);
    gc.setDateType(DateType.ONLY_DATE);
    gc.setSwagger2(true);
    mpg.setGlobalConfig(gc);
    //2、设置数据源
    DataSourceConfig dsc = new DataSourceConfig();
    dsc.setUrl("jdbc:mysql://localhost:3306/kuang_community? useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8"); dsc.setDriverName("com.mysql.cj.jdbc.Driver");
    dsc.setUsername("root");
    dsc.setPassword("123456");
    dsc.setDbType(DbType.MYSQL);
    mpg.setDataSource(dsc);
    //3、包的配置
    PackageConfig pc = new PackageConfig(); 
    pc.setModuleName("blog");                //模块名字
    pc.setParent("com.ren");              //父包
    pc.setEntity("entity");
    pc.setMapper("mapper"); 
    pc.setService("service");
    pc.setController("controller");
    mpg.setPackageInfo(pc);
    //4、策略配置
    StrategyConfig strategy = new StrategyConfig();
     //设置要映射的表名，可以多张，也可以1张
    strategy.setInclude("blog_tags","course","links","sys_settings","user_record"," user_say"); 
    strategy.setNaming(NamingStrategy.underline_to_camel);                                                       strategy.setColumnNaming(NamingStrategy.underline_to_camel); 
    strategy.setEntityLombokModel(true);
    // 自动lombok；
    strategy.setLogicDeleteFieldName("deleted"); 
    // 自动填充配置
    TableFill gmtCreate = new TableFill("gmt_create", FieldFill.INSERT);
    TableFill gmtModified = new TableFill("gmt_modified", FieldFill.INSERT_UPDATE); 
    ArrayList<TableFill> tableFills = new ArrayList<>(); tableFills.add(gmtCreate);                             tableFills.add(gmtModified);
    strategy.setTableFillList(tableFills);
    // 乐观锁 
    strategy.setVersionFieldName("version");
    strategy.setRestControllerStyle(true); 
    strategy.setControllerMappingHyphenStyle(true);
    // localhost:8080/hello_id_2 mpg.setStrategy(strategy);
    mpg.execute();      //执行
} }
```





