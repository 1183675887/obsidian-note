# 27 RESTful 

RESTful ，到现在相信已经没人不知道这个东西了吧！关于 RESTful 的概念，我这里就不做过多介绍了，传统的 Struts 对 RESTful 支持不够友好 ，但是 SpringMVC 对于 RESTful 提供了很好的支持，常见的相关注解有：

```java
@RestController 
@GetMapping 
@PutMapping 
@PostMapping 
@DeleteMapping 
@ResponseBody
...
```

这些注解都是和 RESTful 相关的，在移动互联网中，RESTful 得到了非常广泛的使用。RESTful 这个概念提出来很早，但是以前没有移动互联网时，我们做的大部分应用都是前后端不分的，在这种架构的应  用中，数据基本上都是在后端渲染好返回给前端展示的，此时 RESTful 在 Web 应用中基本就没用武之地，移动互联网的兴起，让我们一套后台对应多个前端项目，因此前后端分离，RESTful   顺利走上前台。

Spring Boot 继承自 Spring + SpringMVC， SpringMVC 中对于 RESTful 支持的特性在 Spring Boot 中全盘接收，同时，结合 Jpa 和 自动化配置，对于 RESTful 还提供了更多的支持，使得开发者几乎不需要写代码（很少几行），就能快速实现一个 RESTful 风格的增删改查。

## 27.1 创建工程

首先创建一个 Spring Boot 工程，引入Web，Jpa，mysql，RestRepositiories依赖：

[![hxu68f.png](https://z3.ax1x.com/2021/09/11/hxu68f.png)](https://imgtu.com/i/hxu68f)

创建完成后，还需要锁定 MySQL 驱动的版本以及加入 Druid 数据库连接池，完整依赖如下：

```xml
<dependencies>
   <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
   </dependency>
   <dependency>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-starter-data-rest</artifactId>
     </dependency>
   <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      </dependency>
   <dependency>
     <groupId>com.alibaba</groupId>
     <artifactId>druid-spring-boot-starter</artifactId>
     <version>1.1.10</version>
   </dependency>
   <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <scope>runtime</scope>
      <version>5.1.27</version>
   </dependency>
</dependencies>
```

## 27.2 配置数据库

主要配置两个，一个是数据库，另一个是 Jpa：

```properties
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource 
spring.datasource.username=root 
spring.datasource.password=root 
spring.datasource.url=jdbc:mysql:///test01 
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect 
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update 
spring.jpa.database-platform=mysql spring.jpa.database=mysql
```

这里的配置，和 Jpa 中的基本一致。前面五行配置了数据库的基本信息，包括数据库连接池、数据库用户名、数据库密码、数据库连接地址  以及数据库驱动名称。接下来的五行配置了 JPA 的基本信息，分别表示生成 SQL 的方言、打印出生成的 SQL 、每次启动项目时根据实际情况选择是否更新表、数据库平台是 MySQL。

## 27.3 构建实体类

```java
@Entity(name = "t_book") 
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) 
    private Long id;
    @Column(name = "book_name") 
    private String name; 
    private String author;
    //省略 getter/setter
     }
public interface BookRepository extends JpaRepository<Book,Long> {
}
```

这里一个是配置了一个实体类 Book，另一个则是配置了一个 BookRepository ，项目启动成功后，框架会根据 Book 类的定义，在数据库中自动创建相应的表，BookRepository 接口则是继承自JpaRepository ，JpaRepository 中自带了一些基本的增删改查方法。就这样，一个基本的增删改查就完成了。

## 27.4 其他配置

最后，也可以在 application.properties 中配置 REST 基本参数：

```properties
spring.data.rest.base-path=/api 
spring.data.rest.sort-param-name=sort 
spring.data.rest.page-param-name=page 
spring.data.rest.limit-param-name=size 
spring.data.rest.max-page-size=20 
spring.data.rest.default-page-size=0 
spring.data.rest.return-body-on-update=true 
spring.data.rest.return-body-on-create=true
```

配置含义，从上往下，依次是：

1.给所有的接口添加统一的前缀

2.配置排序参数的 key ，默认是 sort

3.配置分页查询时页码的 key，默认是 page

4.配置分页查询时每页查询页数的 key，默认是size

5.配置每页最大查询记录数，默认是 20 条

6.分页查询时默认的页码

7.更新成功时是否返回更新记录

8.添加成功时是否返回添加记录

